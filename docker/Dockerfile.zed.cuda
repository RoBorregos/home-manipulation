#############################################
# Created from althack/ros:noetic
#############################################

###########################################
# Base image 
###########################################
FROM nvidia/cuda:11.8.0-devel-ubuntu20.04  AS base

LABEL maintainer="RoBorregos <roborregosteam@gmail.com>"

ENV DEBIAN_FRONTEND=noninteractive

# Install language
RUN apt-get update && apt-get install -y \
  locales \
  && locale-gen en_US.UTF-8 \
  && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
  && rm -rf /var/lib/apt/lists/*
ENV LANG en_US.UTF-8

# Install timezone
RUN ln -fs /usr/share/zoneinfo/UTC /etc/localtime \
  && export DEBIAN_FRONTEND=noninteractive \
  && apt-get update \
  && apt-get install -y tzdata \
  && dpkg-reconfigure --frontend noninteractive tzdata \
  && rm -rf /var/lib/apt/lists/*

# Install ROS
RUN apt-get update && apt-get install -y \
    curl \
    dirmngr \
    gnupg2 \
    lsb-release \
    sudo \
  && sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' \
  && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - \
  && apt-get update && apt-get install -y \
    ros-noetic-ros-base \
  && rm -rf /var/lib/apt/lists/*

# Setup environment
ENV LD_LIBRARY_PATH=/opt/ros/noetic/lib
ENV ROS_DISTRO=noetic
ENV ROS_ROOT=/opt/ros/noetic/share/ros
ENV ROS_PACKAGE_PATH=/opt/ros/noetic/share
ENV ROS_MASTER_URI=http://localhost:11311
ENV ROS_PYTHON_VERSION=3
ENV ROS_VERSION=1
ENV PATH=/opt/ros/noetic/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV ROSLISP_PACKAGE_DIRECTORIES=
ENV PYTHONPATH=/opt/ros/noetic/lib/python3/dist-packages
ENV PKG_CONFIG_PATH=/opt/ros/noetic/lib/pkgconfig
ENV ROS_ETC_DIR=/opt/ros/noetic/etc/ros
ENV CMAKE_PREFIX_PATH=/opt/ros/noetic
ENV DEBIAN_FRONTEND=

# New stage for each feature added
###########################################
# Develop image 
###########################################
FROM base AS dev

ENV DEBIAN_FRONTEND=noninteractive
# Install dev tools
RUN apt-get update && apt-get install -y \
    python3-rosdep \
    python3-rosinstall \
    python3-rosinstall-generator \
    python3-wstool \
    python3-pip \
    python3-pep8 \
    python3-autopep8 \
    pylint3 \
    build-essential \
    bash-completion \
    git \
    vim \
  && rm -rf /var/lib/apt/lists/* \
  && rosdep init || echo "rosdep already initialized"

ARG USERNAME=ros
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create a non-root user
RUN groupadd --gid $USER_GID $USERNAME \
  && useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \
  # Add sudo support for the non-root user
  && apt-get update \
  && apt-get install -y sudo \
  && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME\
  && chmod 0440 /etc/sudoers.d/$USERNAME \
  && rm -rf /var/lib/apt/lists/*

# Set up autocompletion for user
RUN apt-get update && apt-get install -y git-core bash-completion \
  && echo "if [ -f /opt/ros/${ROS_DISTRO}/setup.bash ]; then source /opt/ros/${ROS_DISTRO}/setup.bash; fi" >> /home/$USERNAME/.bashrc \
  && echo "if [ -f /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]; then source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash; fi" >> /home/$USERNAME/.bashrc \
  && rm -rf /var/lib/apt/lists/* 
ENV DEBIAN_FRONTEND=

###########################################
# Full image 
###########################################
FROM dev AS full

ENV DEBIAN_FRONTEND=noninteractive
# Install the full release
RUN apt-get update && apt-get install -y \
  ros-noetic-desktop \
  && rm -rf /var/lib/apt/lists/*
ENV DEBIAN_FRONTEND=

###########################################
#  Full+Nvidia image 
###########################################

FROM full AS full-nvidia

################
# Expose the nvidia driver to allow opengl 
# Dependencies for glvnd and X11.
################
RUN apt-get update \
  && apt-get install -y -qq --no-install-recommends \
  libglvnd0 \
  libgl1 \
  libglx0 \
  libegl1 \
  libxext6 \
  libx11-6

# Env vars for the nvidia-container-runtime.
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES graphics,utility,compute
ENV QT_X11_NO_MITSHM 1

###########################################
# Manipulation Base image
###########################################

FROM full-nvidia AS manipulation-base

# Install dependencies.
RUN apt-get update -qq && apt-get install -y  build-essential \
    ffmpeg libsm6 libxext6 autoconf libtool mesa-utils \
    terminator nano git wget curl iputils-ping \
    libcanberra-gtk-module libcanberra-gtk3-module \
    ros-dev-tools net-tools nmap

# 
############################################
# GPD
############################################
FROM manipulation-base AS ros-deps

RUN apt update && apt install -y  ros-noetic-rqt ros-noetic-rqt-common-plugins \
    ros-noetic-trajectory-msgs ros-noetic-tf2-* \
    ros-noetic-ros-controllers ros-noetic-ros-control ros-noetic-robot-state-publisher \
    ros-noetic-pcl-ros ros-noetic-pcl-conversions ros-noetic-moveit-visual-tools \
    ros-noetic-moveit-simple-controller-manager ros-noetic-moveit-setup-assistant \
    ros-noetic-moveit-servo ros-noetic-moveit-ros-visualization ros-noetic-moveit-ros-planning-interface \
    ros-noetic-moveit-ros-planning ros-noetic-moveit-ros-perception ros-noetic-moveit-ros-move-group \
    ros-noetic-moveit-msgs ros-noetic-moveit-kinematics \
    ros-noetic-moveit-fake-controller-manager ros-noetic-moveit-core ros-noetic-moveit-commander \
    ros-noetic-joint-state-publisher-gui ros-noetic-joint-state-publisher ros-noetic-joint-state-controller \
    ros-noetic-joint-limits-interface ros-noetic-gazebo-ros-pkgs \
    ros-noetic-eigen-conversions libeigen3-dev ros-noetic-dynamic-reconfigure ros-noetic-control-toolbox \
    ros-noetic-joy python-numpy ros-noetic-moveit-planners-* ros-noetic-navigation \
    ros-noetic-audio-common ros-noetic-audio-common-msgs ros-noetic-audio-play \
    ros-noetic-image-transport-plugins ros-noetic-image-transport
#
############################################
# ZED SDK
############################################
FROM ros-deps AS zed
ENV NVIDIA_DRIVER_CAPABILITIES \
${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility

# Setup the ZED SDK
RUN apt-get update -y || true ; apt-get install --no-install-recommends lsb-release wget less udev sudo zstd build-essential cmake python3 python3-pip libpng-dev libgomp1 -y 
RUN wget https://download.stereolabs.com/zedsdk/4.1/cu118/ubuntu20 -O zed_sdk.run && chmod +x zed_sdk.run
RUN ./zed_sdk.run -- silent skip_cuda 
RUN chmod -R 777 /usr/local/zed
RUN rm -rf /var/lib/apt/lists/* && ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so

#
############################################
# DEPTH-AI
############################################

FROM zed AS depth-ai

RUN apt-get update && apt install -y ros-noetic-depthai-ros

FROM depth-ai AS zed-fix
RUN chmod -R 777 /usr/local/zed
RUN wget http://calib.stereolabs.com/?SN=25558364 -O /usr/local/zed/settings/SN25558364.conf

RUN mkdir /workspace
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
ENTRYPOINT [ "/bin/bash", "-l", "-c" ]